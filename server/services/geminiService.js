const { GoogleGenerativeAI } = require('@google/generative-ai');
const elasticsearchService = require('./elasticsearchService');

class GeminiService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
    
    // System prompt cho QuailCare AI
    this.systemPrompt = `
B·∫°n l√† QuailCare AI - tr·ª£ l√Ω th√¥ng minh chuy√™n v·ªÅ chƒÉn nu√¥i c√∫t v√† n√¥ng nghi·ªáp.

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† h·ªØu √≠ch. 
V·ªõi c√¢u h·ªèi chuy√™n m√¥n, h√£y ƒë∆∞a ra l·ªùi khuy√™n chi ti·∫øt v√† th·ª±c t·∫ø.
V·ªõi c√¢u h·ªèi th√¥ng th∆∞·ªùng, h√£y tr√≤ chuy·ªán m·ªôt c√°ch t·ª± nhi√™n.
`;
    
    // Initialize Elasticsearch connection
    this.initElasticsearch();
  }

  async initElasticsearch() {
    try {
      const isConnected = await elasticsearchService.testConnection();
      const indexExists = await elasticsearchService.checkIndex();
      
      if (isConnected && indexExists) {
        console.log('‚úÖ Elasticsearch ready');
        this.elasticsearchReady = true;
      } else {
        console.log('‚ö†Ô∏è Elasticsearch not ready - using Gemini only');
        this.elasticsearchReady = false;
      }
    } catch (error) {
      console.error('Elasticsearch init failed:', error);
      this.elasticsearchReady = false;
    }
  }

  // CH·ªà l·ªçc nh·ªØng c√¢u h·ªèi th·∫≠t s·ª± c∆° b·∫£n
  isBasicGreeting(query) {
    const normalizedQuery = query.toLowerCase()
      .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
      .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
      .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
      .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
      .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
      .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
      .replace(/[ƒë]/g, 'd');

    // Ch·ªâ c√°c c√¢u ch√†o h·ªèi, c·∫£m ∆°n c∆° b·∫£n
    const basicPhrases = [
      'xin chao', 'chao ban', 'hello', 'hi',
      'cam on', 'thank you', 'thanks',
      'tam biet', 'bye', 'goodbye',
      'ban la ai', 'ban ten gi', 'gioi thieu',
      'ban co the', 'ban lam gi',
      'ok', 'duoc', 'good', 'tot'
    ];

    // C√¢u ng·∫Øn (d∆∞·ªõi 20 k√Ω t·ª±) v√† ch·ªâ ch·ª©a greeting
    if (query.length <= 20) {
      const isBasic = basicPhrases.some(phrase => 
        normalizedQuery.includes(phrase) || normalizedQuery === phrase
      );
      
      if (isBasic) {
        console.log('üí¨ Basic greeting detected:', query);
        return true;
      }
    }

    console.log('üîç Not a basic greeting, will search knowledge base');
    return false;
  }

  async generateResponse(messages) {
    try {
      // L·∫•y c√¢u h·ªèi m·ªõi nh·∫•t
      const lastMessage = messages[messages.length - 1];
      const userQuery = lastMessage?.content || '';

      console.log('Processing query:', userQuery);

      let knowledgeContext = '';
      let searchResults = [];
      let responseType = 'general';

      // LOGIC ƒê∆†N GI·∫¢N:
      // 1. N·∫øu l√† c√¢u ch√†o c∆° b·∫£n ‚Üí d√πng general mode
      if (this.isBasicGreeting(userQuery)) {
        console.log('üí¨ Using general conversation mode');
        responseType = 'general';
      }
      // 2. T·∫•t c·∫£ c√¢u h·ªèi kh√°c ‚Üí t√¨m Elasticsearch tr∆∞·ªõc
      else if (this.elasticsearchReady) {
        try {
          console.log('üîç Searching Elasticsearch for all non-basic queries...');
          searchResults = await elasticsearchService.searchKnowledge(userQuery, 5);
          
          if (searchResults.length > 0) {
            knowledgeContext = this.buildKnowledgeContext(searchResults);
            responseType = 'knowledge_expert';
            console.log(`‚úÖ Found ${searchResults.length} relevant documents from knowledge base`);
          } else {
            console.log('‚ÑπÔ∏è No documents found in Elasticsearch, using general Gemini');
            responseType = 'general';
          }
        } catch (searchError) {
          console.error('‚ùå Elasticsearch search error:', searchError);
          console.log('üîÑ Falling back to general Gemini');
          responseType = 'general';
        }
      }
      // 3. N·∫øu Elasticsearch kh√¥ng available ‚Üí d√πng general
      else {
        console.log('‚ö†Ô∏è Elasticsearch not available - using general Gemini');
        responseType = 'general';
      }

      // T·∫°o context t·ª´ l·ªãch s·ª≠ chat
      const recentMessages = messages.slice(-6);
      const chatHistory = recentMessages.map(msg => 
        `${msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'QuailCare AI'}: ${msg.content}`
      ).join('\n');

      // T·∫°o prompt
      const prompt = this.buildPrompt(chatHistory, knowledgeContext, userQuery, responseType);

      console.log(`ü§ñ Calling Gemini API (${responseType} mode)...`);
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const aiResponse = response.text();

      // Log response info
      console.log('‚úÖ Gemini response generated successfully');
      console.log('üìä Response stats:', {
        type: responseType,
        hasKnowledgeBase: searchResults.length > 0,
        elasticsearchReady: this.elasticsearchReady
      });

      return {
        content: aiResponse,
        sources: searchResults.length > 0 ? searchResults.slice(0, 3) : null,
        hasKnowledgeBase: searchResults.length > 0,
        responseType: responseType
      };

    } catch (error) {
      console.error('‚ùå Gemini API Error:', error);
      
      let fallbackMessage = 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.';
      
      if (error.message.includes('API key')) {
        fallbackMessage = 'C√≥ v·∫•n ƒë·ªÅ v·ªõi c·∫•u h√¨nh AI. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
      } else if (error.message.includes('quota') || error.message.includes('limit')) {
        fallbackMessage = 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng AI. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
      }
      
      throw new Error(fallbackMessage);
    }
  }

  // X√¢y d·ª±ng context t·ª´ k·∫øt qu·∫£ Elasticsearch
  buildKnowledgeContext(searchResults) {
    const context = searchResults.map((result, index) => {
      let content = result.content;
      
      // ∆Øu ti√™n highlights n·∫øu c√≥
      if (result.highlights && result.highlights.length > 0) {
        content = result.highlights.join('... ');
      }

      // Gi·ªõi h·∫°n ƒë·ªô d√†i content
      if (content.length > 400) {
        content = content.substring(0, 400) + '...';
      }

      // B·ªè c√°c tr√≠ch d·∫´n s·ªë [1], [2], [3]... 
      content = content.replace(/\[\d+\]/g, '');
      
      // B·ªè c√°c d·∫•u citation kh√°c
      content = content.replace(/\(\s*\d+\\s*\)/g, '');
      content = content.replace(/\d+\s*\./g, ''); // B·ªè "1. ", "2. "
      
      // Clean up extra spaces
      content = content.replace(/\s+/g, ' ').trim();

      return `${content}`;
    }).join('\n\n');

    return context;
  }

  // X√¢y d·ª±ng prompt ƒë∆°n gi·∫£n h∆°n
  buildPrompt(chatHistory, knowledgeContext, userQuery, responseType) {
    let prompt = this.systemPrompt;

    if (responseType === 'knowledge_expert') {
      prompt += `\n\nüéØ CHUY√äN GIA v·ªõi c∆° s·ªü d·ªØ li·ªáu:`;
      prompt += `\n\nTH√îNG TIN T·ª™ T√ÄI LI·ªÜU CHUY√äN M√îN:\n${knowledgeContext}`;
      prompt += `\n\nH√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c v√† th·ª±c t·∫ø. Khi tr·∫£ l·ªùi, h√£y t·ª± nhi√™n v√† kh√¥ng c·∫ßn tr√≠ch d·∫´n s·ªë. ·ªû cu·ªëi c√¢u tr·∫£ l·ªùi, h√£y ghi: "Ngu·ªìn: B·ªò N√îNG NGHI·ªÜP V√Ä PH√ÅT TRI·ªÇN N√îNG TH√îN"`;
    } else {
      prompt += `\n\nüí¨ TR·ª¢ L√ù TH√îNG MINH:`;
      prompt += `\n\nH√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch d·ª±a tr√™n ki·∫øn th·ª©c chung.`;
    }

    // Th√™m l·ªãch s·ª≠ tr√≤ chuy·ªán
    if (chatHistory) {
      prompt += `\n\nL·ªäCH S·ª¨:\n${chatHistory}`;
    }

    prompt += `\n\nC√ÇU H·ªéI: "${userQuery}"`;

    if (responseType === 'knowledge_expert') {
      prompt += `\n\nüìù Tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin t√†i li·ªáu, ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ c√≥ th·ªÉ √°p d·ª•ng ngay. Vi·∫øt t·ª± nhi√™n, kh√¥ng d√πng tr√≠ch d·∫´n s·ªë. Cu·ªëi c√πng ghi ngu·ªìn t·ª´ B·ªô N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n.`;
    } else {
      prompt += `\n\nüìù Tr·∫£ l·ªùi th√¢n thi·ªán v√† h·ªØu √≠ch.`;
    }

    return prompt;
  }
}

module.exports = new GeminiService();